{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/closure/","webpackCompilationHash":"bac63dc33e98e3b1290c","result":{"data":{"markdownRemark":{"id":"5518d6ca-24c5-5338-b621-ba5b35407d3a","html":"<h2 id=\"closure-is-the-most-esoteric-of-javascript-concepts\"><a href=\"#closure-is-the-most-esoteric-of-javascript-concepts\" aria-label=\"closure is the most esoteric of javascript concepts permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Closure is the most esoteric of JavaScript concepts</h2>\n<ul>\n<li>Enables powerful pro-level functions like ‘once’ and ‘memoize’</li>\n<li>Many JavaScript design patterns including the module pattern use closure</li>\n<li>Build iterators, handle partial application and maintain state in an\nasynchronous world</li>\n</ul>\n<h3 id=\"functions-with-memories\"><a href=\"#functions-with-memories\" aria-label=\"functions with memories permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functions with memories</h3>\n<p>When our functions get called, we create a live store of data (local memory/variable environment/state) for that function’s execution context.\nWhen the function finishes executing, its local memory is deleted (except the returned value)\nBut what if our functions could hold on to live data between executions?\nThis would let our function definitions have an associated cache/persistent memory\nBut it all starts with us returning a function from another function</p>\n<p>Functions can be returned from other functions in JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">multiplyBy2</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> multiplyBy2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> generatedFunc <span class=\"token operator\">=</span> <span class=\"token function\">createFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">generatedFunc</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span></code></pre></div>\n<p>Calling a function in the same function call as it was defined:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">outer</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">incrementCounter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    counter <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">incrementCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Calling a function outside of the function call in which it was defined:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">outer</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">incrementCounter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> counter <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> incrementCounter<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> myNewFunction <span class=\"token operator\">=</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">myNewFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">myNewFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"when-a-function-is-defined-it-gets-a-bond-to-the-surrounding-local-memory-variable-environment-in-which-it-has-been-defined\"><a href=\"#when-a-function-is-defined-it-gets-a-bond-to-the-surrounding-local-memory-variable-environment-in-which-it-has-been-defined\" aria-label=\"when a function is defined it gets a bond to the surrounding local memory variable environment in which it has been defined permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>When a function is defined, it gets a bond to the surrounding Local Memory (“Variable Environment”) in which it has been defined</h3>\n<ul>\n<li>We return <code class=\"language-text\">incrementCounter</code>’s code (function definition) out of outer into\nglobal and give it a new name - <code class=\"language-text\">myNewFunction</code></li>\n<li>We maintain the bond to outer’s live local memory - it gets ‘returned out’\nattached on the back of <code class=\"language-text\">incrementCounter</code>’s function definition.</li>\n<li>So outer’s local memory is now stored attached to <code class=\"language-text\">myNewFunction</code> - even\nthough outer’s execution context is long gone</li>\n<li>When we run <code class=\"language-text\">myNewFunction</code> in global, it will first look in its own local\nmemory first (as we’d expect), but then in <code class=\"language-text\">myNewFunction</code>’s ‘backpack’</li>\n</ul>\n<h3 id=\"what-can-we-call-this-backpack\"><a href=\"#what-can-we-call-this-backpack\" aria-label=\"what can we call this backpack permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What can we call this ‘backpack’?</h3>\n<ul>\n<li>Closed over <strong><em>Variable Environment</em></strong> (C.O.V.E.)</li>\n<li>Persistent Lexical Scope Referenced Data (P.L.S.R.D.)</li>\n<li><strong><em>Backpack</em></strong></li>\n<li><strong><em>Closure</em></strong>\nThe <strong><em>backpack</em></strong> (or <strong><em>closure</em></strong>) of live data is attached incrementCounter (then to <code class=\"language-text\">myNewFunction</code>) through a hidden property known as <code class=\"language-text\">[[scope]]</code> which persists when the inner function is returned out</li>\n</ul>\n<h3 id=\"lets-run-outer-again\"><a href=\"#lets-run-outer-again\" aria-label=\"lets run outer again permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Let’s run <code class=\"language-text\">outer</code> again</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">outer</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">incrementCounter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    counter <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> incrementCounter<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> myNewFunction <span class=\"token operator\">=</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">myNewFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">myNewFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> anotherFunction <span class=\"token operator\">=</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">anotherFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">anotherFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If we run <code class=\"language-text\">outer</code> again and store the returned <code class=\"language-text\">incrementCounter</code> function definition in <code class=\"language-text\">anotherFunction</code>, this new <code class=\"language-text\">incrementCounter</code> function was created in a new execution context and therefore has a brand new independent <strong><em>backpack</em></strong></p>\n<h3 id=\"closure-gives-our-functions-persistent-memories-and-entirely-new-toolkit-for-writing-professional-code\"><a href=\"#closure-gives-our-functions-persistent-memories-and-entirely-new-toolkit-for-writing-professional-code\" aria-label=\"closure gives our functions persistent memories and entirely new toolkit for writing professional code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Closure gives our functions persistent memories and entirely new toolkit for writing professional code</h3>\n<ul>\n<li><strong>Helper functions:</strong> Everyday professional helper functions like <strong><em>once</em></strong> and <strong><em>memoize</em></strong> <br></li>\n<li><strong>Iterators and generators:</strong> Which use lexical scoping and closure to achieve the most contemporary patterns for handling data in JavaScript<br></li>\n<li><strong>Module pattern:</strong> Preserve state for the life of an application without polluting the global namespace<br></li>\n<li><strong>Asynchronous JavaScript:</strong> Callbacks and Promises rely on closure to persist state in an asynchronous environment<br></li>\n</ul>","fields":{"slug":"/posts/closure/","tagSlugs":["/tag/note/"]},"frontmatter":{"date":"2021-08-23","description":"Javascript Explained 101.","tags":["Note"],"title":"Closure","socialImage":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/closure/"}}}