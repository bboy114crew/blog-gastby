{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/react-code-splitting/","webpackCompilationHash":"53d13b6613152d12cf35","result":{"data":{"markdownRemark":{"id":"aadd38fb-b3fd-55e7-b478-3a562d9a870c","html":"<p>Code splitting acts on the principle that loading less code will speed up your\napp. Say for example that we‚Äôre building a complex dashboard application that\nincludes the venerable d3 library for graphing data. Your users start\ncomplaining because it takes too long to load the login screen.</p>\n<p>So, assuming that performance problems can be resolved by less code, how can we\nsolve this one? Well, do we really <em>need</em> to have that code for the chart when\nthe user loads the login screen? Nope! We could load that on-demand.</p>\n<p>Luckily for us, there‚Äôs a built-in way to do this with JavaScript standards.\nIt‚Äôs called a dynamic import and the syntax looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/some-module.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">module</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do stuff with the module's exports</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// there was some error loading the module...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>üìú Learn more about dynamic imports in the browser in\n<a href=\"https://kentcdodds.com/blog/super-simple-start-to-es-modules-in-the-browser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Super Simple Start to ESModules in the browser</a></p>\n</blockquote>\n<p>To take this further, React has built-in support for loading modules as React\ncomponents. The module must have a React component as the default export, and\nyou have to use the <code class=\"language-text\">&lt;React.Suspense /&gt;</code> component to render a fallback value\nwhile the user waits for the module to be loaded.</p>\n<p>One great way to analyze your app to determine the need/benefit of code\nsplitting for a certain feature/page/interaction, is to use\n<a href=\"https://developers.google.com/web/tools/chrome-devtools/coverage\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the ‚ÄúCoverage‚Äù feature of the developer tools</a>.</p>\n<h3 id=\"1-eager-loading\"><a href=\"#1-eager-loading\" aria-label=\"1 eager loading permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Eager loading</h3>\n<p>So if they <code class=\"language-text\">mouseOver</code> or <code class=\"language-text\">focus</code> the <code class=\"language-text\">&lt;label&gt;</code> for the something, we should kick off a\ndynamic import </p>\n<blockquote>\n<p> Hint: it doesn‚Äôt matter how many times you call\n<code class=\"language-text\">import(&#39;./path-to-module&#39;)</code>, webpack will only actually load the module once.</p>\n</blockquote>\n<h3 id=\"2-webpack-magic-comments\"><a href=\"#2-webpack-magic-comments\" aria-label=\"2 webpack magic comments permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Webpack magic comments</h3>\n<p>If you‚Äôre using webpack to bundle your application, then you can use webpack\n<a href=\"https://webpack.js.org/api/module-methods/#magic-comments\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">magic comments</a> to\nhave webpack instruct the browser to prefetch dynamic imports:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackPrefetch: true */</span> <span class=\"token string\">'./some-module.js'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>When webpack sees this comment, it adds this to your document‚Äôs <code class=\"language-text\">head</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>link rel<span class=\"token operator\">=</span><span class=\"token string\">\"prefetch\"</span> <span class=\"token keyword\">as</span><span class=\"token operator\">=</span><span class=\"token string\">\"script\"</span> href<span class=\"token operator\">=</span><span class=\"token string\">\"/static/js/1.chunk.js\"</span><span class=\"token operator\">></span></code></pre></div>\n<p>With this, the browser will automatically load this JavaScript file into the\nbrowser cache so it‚Äôs ready ahead of time.</p>\n<p>The change itself is minimal, but pull up the DevTools to make sure it‚Äôs loading\nproperly (you‚Äôll need to uncheck the ‚ÄúDisable cache‚Äù button to observe any\nchanges).</p>\n<h2 id=\"notes\"><a href=\"#notes\" aria-label=\"notes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Notes</h2>\n<p>Another thing which we won‚Äôt cover in this workshop, but you should look into\nlater, is using the <code class=\"language-text\">webpackChunkName</code> magic comment which will allow webpack to\nplace common modules in the same chunk. This is good for components which you\nwant loaded together in the same chunk (to reduce multiple requests for multiple\nmodules which will likely be needed together).</p>","fields":{"slug":"/posts/react-code-splitting/","tagSlugs":["/tag/note/"]},"frontmatter":{"date":"2021-05-05","description":"React Performance 101.","tags":["Note"],"title":"Code splitting - React","socialImage":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/react-code-splitting/"}}}