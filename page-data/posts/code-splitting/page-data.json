{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/code-splitting/","webpackCompilationHash":"71a5ccf932115429c189","result":{"data":{"markdownRemark":{"id":"da81fe0c-100d-5d84-af1d-7af066aa8ef8","html":"<p>Code splitting is one of the most compelling features of webpack and almost modern bundler tools.\nThis feature allows you to split your code into various bundles which can then be loaded on demand or in parallel.</p>\n<p>We have cool story behind webpack history and code-splitting feature:\nBefore webpack was born we have project named as <a href=\"https://github.com/medikoo/modules-webmake\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">modules-webmake</a>.</p>\n<p><a href=\"https://twitter.com/wSokra\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tobias Koppers</a> a.k.a founder of webpack wanted Code Splitting for modules-webmake so webpack was born. Interestingly the <a href=\"https://github.com/medikoo/modules-webmake/issues/7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Code Splitting issue</a> is still open.</p>\n<h2 id=\"we-have-some-approaches-to-code-splitting\"><a href=\"#we-have-some-approaches-to-code-splitting\" aria-label=\"we have some approaches to code splitting permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>We have some approaches to code splitting:</h2>\n<h3 id=\"1-eager-loading\"><a href=\"#1-eager-loading\" aria-label=\"1 eager loading permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Eager loading</h3>\n<p>For instance, we <code class=\"language-text\">mouseOver</code> or <code class=\"language-text\">focus</code> the <code class=\"language-text\">&lt;label&gt;</code> for the something, we should kick off a\ndynamic import. As <code class=\"language-text\">import()</code> returns a promise, it can be used with async functions. Here’s how it would simplify the code:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myModlule <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./path-to-module'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>It doesn’t matter how many times you call <code class=\"language-text\">import(&#39;./path-to-module&#39;)</code>, webpack will only actually load the module once.</p>\n<h3 id=\"2-prefetching-modules\"><a href=\"#2-prefetching-modules\" aria-label=\"2 prefetching modules permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Prefetching modules</h3>\n<p>If you’re using webpack to bundle your application, then you can use webpack\n<a href=\"https://webpack.js.org/api/module-methods/#magic-comments\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">magic comments</a> to\nhave webpack instruct the browser to prefetch dynamic imports:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackPrefetch: true */</span> <span class=\"token string\">'./some-module.js'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>When webpack sees this comment, it adds this to your document’s <code class=\"language-text\">head</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>link rel<span class=\"token operator\">=</span><span class=\"token string\">\"prefetch\"</span> <span class=\"token keyword\">as</span><span class=\"token operator\">=</span><span class=\"token string\">\"script\"</span> href<span class=\"token operator\">=</span><span class=\"token string\">\"/static/js/1.chunk.js\"</span><span class=\"token operator\">></span></code></pre></div>\n<p>With this, the browser will automatically load this JavaScript file into the\nbrowser cache so it’s ready ahead of time.</p>\n<p>The change itself is minimal, but pull up the DevTools to make sure it’s loading\nproperly (you’ll need to uncheck the “Disable cache” button to observe any\nchanges).</p>\n<h2 id=\"fyi\"><a href=\"#fyi\" aria-label=\"fyi permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FYI</h2>\n<p>One great way to analyze your app to determine the need/benefit of code\nsplitting for a certain feature/page/interaction, is to use\n<a href=\"https://developers.google.com/web/tools/chrome-devtools/coverage\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the “Coverage” feature of the developer tools</a>.</p>\n<h2 id=\"notes\"><a href=\"#notes\" aria-label=\"notes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Notes</h2>\n<p>The <code class=\"language-text\">webpackChunkName</code> magic comment which will allow webpack to\nplace common modules in the same chunk. This is good for components which you\nwant loaded together in the same chunk (to reduce multiple requests for multiple\nmodules which will likely be needed together).</p>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference:</h2>\n<p><a href=\"https://webpack.js.org/guides/code-splitting\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Webpack - Code Splitting</a> <br/>\n<a href=\"https://webpack.js.org/guides/lazy-loading/#example\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Webpack - Lazy Loading</a> <br/>\n<a href=\"https://reactjs.org/docs/code-splitting.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React - Code Splitting</a> <br/>\n<a href=\"https://web.dev/code-splitting-with-dynamic-imports-in-nextjs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Code splitting with dynamic imports in Next.js</a> <br/>\n<a href=\"https://web.dev/route-level-code-splitting-in-angular/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Route-level code splitting in Angular</a> <br/>\n<a href=\"https://router.vuejs.org/guide/advanced/lazy-loading.html#grouping-components-in-the-same-chunk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue - Lazy Loading Routes</a> <br/></p>","fields":{"slug":"/posts/code-splitting/","tagSlugs":["/tag/note/"]},"frontmatter":{"date":"2020-05-05","description":"Web Performance 101.","tags":["Note"],"title":"Code splitting","socialImage":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/code-splitting/"}}}