<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Nguythang's Blog]]></title><description><![CDATA[My world]]></description><link>https://bboy114crew.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 14 Aug 2021 16:24:12 GMT</lastBuildDate><item><title><![CDATA[Understanding "same-site" and "same-origin"]]></title><description><![CDATA[Security 101.]]></description><link>https://bboy114crew.github.io/posts/same-site-same-origin/</link><guid isPermaLink="false">https://bboy114crew.github.io/posts/same-site-same-origin/</guid><pubDate>Thu, 13 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;1-origin&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-origin&quot; aria-label=&quot;1 origin permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Origin&lt;/h3&gt;
&lt;p&gt;“Origin” is a combination of a scheme (also known as the protocol, for example HTTP or HTTPS), hostname, and port (if specified). For example, given a URL of &lt;a href=&quot;https://www.example.com:443/foo&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.example.com:443/foo&lt;/a&gt; , the “origin” is &lt;a href=&quot;https://www.example.com:443&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.example.com:443&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;2-site&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-site&quot; aria-label=&quot;2 site permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Site&lt;/h3&gt;
&lt;p&gt;Top-level domains (TLDs) such as .com and .org are listed in the Root Zone Database. In the example above, “site” is the combination of the TLD and the part of the domain just before it. For example, given a URL of &lt;a href=&quot;https://www.example.com:443/foo&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.example.com:443/foo&lt;/a&gt; , the “site” is example.com.&lt;/p&gt;
&lt;p&gt;However, for domains such as .co.jp or .github.io, just using the TLD of .jp or .io is not granular enough to identify the “site”. And there is no way to algorithmically determine the level of registrable domains for a particular TLD. That’s why a list of “effective TLDs”(eTLDs) was created. These are defined in the Public Suffix List. The list of eTLDs is maintained at publicsuffix.org/list.&lt;/p&gt;
&lt;p&gt;The whole site name is known as the eTLD+1. For example, given a URL of &lt;a href=&quot;https://my-project.github.io&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://my-project.github.io&lt;/a&gt; , the eTLD is .github.io and the eTLD+1 is my-project.github.io, which is considered a “site”. In other words, the eTLD+1 is the effective TLD and the part of the domain just before it.&lt;/p&gt;
&lt;h3 id=&quot;3-mixed-content&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-mixed-content&quot; aria-label=&quot;3 mixed content permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Mixed content&lt;/h3&gt;
&lt;p&gt;Mixed content occurs when initial HTML is loaded over a secure HTTPS connection, but other resources (such as images, videos, stylesheets, scripts) are loaded over an insecure HTTP connection. This is called mixed content because both HTTP and HTTPS content are being loaded to display the same page, and the initial request was secure over HTTPS.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Code splitting]]></title><description><![CDATA[Web Performance 101.]]></description><link>https://bboy114crew.github.io/posts/code-splitting/</link><guid isPermaLink="false">https://bboy114crew.github.io/posts/code-splitting/</guid><pubDate>Wed, 05 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Code splitting is one of the most compelling features of webpack and almost modern bundler tools.
This feature allows you to split your code into various bundles which can then be loaded on demand or in parallel.&lt;/p&gt;
&lt;p&gt;We have cool story behind webpack history and code-splitting feature:
Before webpack was born we have project named as &lt;a href=&quot;https://github.com/medikoo/modules-webmake&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;modules-webmake&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/wSokra&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Tobias Koppers&lt;/a&gt; a.k.a founder of webpack wanted Code Splitting for modules-webmake so webpack was born. Interestingly the &lt;a href=&quot;https://github.com/medikoo/modules-webmake/issues/7&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Code Splitting issue&lt;/a&gt; is still open.&lt;/p&gt;
&lt;p&gt;We have some approaches to code splitting:&lt;/p&gt;
&lt;h3 id=&quot;1-eager-loading&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-eager-loading&quot; aria-label=&quot;1 eager loading permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Eager loading&lt;/h3&gt;
&lt;p&gt;So if they &lt;code class=&quot;language-text&quot;&gt;mouseOver&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;focus&lt;/code&gt; the &lt;code class=&quot;language-text&quot;&gt;&amp;lt;label&amp;gt;&lt;/code&gt; for the something, we should kick off a
dynamic import &lt;/p&gt;
&lt;p&gt;It doesn’t matter how many times you call &lt;code class=&quot;language-text&quot;&gt;import(&amp;#39;./path-to-module&amp;#39;)&lt;/code&gt;, webpack will only actually load the module once.&lt;/p&gt;
&lt;h3 id=&quot;2-prefetching-modules&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-prefetching-modules&quot; aria-label=&quot;2 prefetching modules permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Prefetching modules&lt;/h3&gt;
&lt;p&gt;If you’re using webpack to bundle your application, then you can use webpack
&lt;a href=&quot;https://webpack.js.org/api/module-methods/#magic-comments&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;magic comments&lt;/a&gt; to
have webpack instruct the browser to prefetch dynamic imports:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* webpackPrefetch: true */&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./some-module.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When webpack sees this comment, it adds this to your document’s &lt;code class=&quot;language-text&quot;&gt;head&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;link rel&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;prefetch&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;script&quot;&lt;/span&gt; href&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/static/js/1.chunk.js&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this, the browser will automatically load this JavaScript file into the
browser cache so it’s ready ahead of time.&lt;/p&gt;
&lt;p&gt;The change itself is minimal, but pull up the DevTools to make sure it’s loading
properly (you’ll need to uncheck the “Disable cache” button to observe any
changes).&lt;/p&gt;
&lt;h3 id=&quot;fyi&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#fyi&quot; aria-label=&quot;fyi permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FYI:&lt;/h3&gt;
&lt;p&gt;One great way to analyze your app to determine the need/benefit of code
splitting for a certain feature/page/interaction, is to use
&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/coverage&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;the “Coverage” feature of the developer tools&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;notes&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#notes&quot; aria-label=&quot;notes permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Notes&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;webpackChunkName&lt;/code&gt; magic comment which will allow webpack to
place common modules in the same chunk. This is good for components which you
want loaded together in the same chunk (to reduce multiple requests for multiple
modules which will likely be needed together).&lt;/p&gt;
&lt;h3 id=&quot;reference&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/guides/code-splitting&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Webpack - Code Splitting&lt;/a&gt; &lt;br/&gt;
&lt;a href=&quot;https://webpack.js.org/guides/lazy-loading/#example&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Webpack - Lazy Loading&lt;/a&gt; &lt;br/&gt;
&lt;a href=&quot;https://reactjs.org/docs/code-splitting.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;React - Code Splitting&lt;/a&gt; &lt;br/&gt;
&lt;a href=&quot;https://web.dev/code-splitting-with-dynamic-imports-in-nextjs/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Code splitting with dynamic imports in Next.js&lt;/a&gt; &lt;br/&gt;
&lt;a href=&quot;https://web.dev/route-level-code-splitting-in-angular/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Route-level code splitting in Angular&lt;/a&gt; &lt;br/&gt;
&lt;a href=&quot;https://router.vuejs.org/guide/advanced/lazy-loading.html#grouping-components-in-the-same-chunk&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Vue - Lazy Loading Routes&lt;/a&gt; &lt;br/&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Promise vs Callback]]></title><description><![CDATA[Javascript Explained 101.]]></description><link>https://bboy114crew.github.io/posts/promise-callbacl/</link><guid isPermaLink="false">https://bboy114crew.github.io/posts/promise-callbacl/</guid><pubDate>Wed, 21 Apr 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;It’s kind of the control is in the opposite of directions. We’re giving away our function, versus we’re receiving a value that has not come to be just yet.&lt;/p&gt;</content:encoded></item></channel></rss>